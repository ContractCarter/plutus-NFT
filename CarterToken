datatype
datum/Redeemers
Script Address
txInfo
Instances
find output
compile 
off-chain
data params
contract wsea
endpoints

--| Tokenize CarterToken allow anyone swap for its value
data TokenSale = TokenSale 
{ tsSeller :: !PubKeyHash
, tsToken :: !AssetClass
, tsNFT   :: !AssetClass
} deriving (Show, Generic, FromJSON, ToJSON, Prelude.Eq, Prelude.Ord)


data TSRedeemer = 
      SetPrice Integer             -- price
    | BuyTokens Integer            -- buy CT Tokens
    | Withdraw Integer Integer     -- Withdraw Tokens + lovelaces
    deriving (Show, Prelude.Eq)

PlutusTx.unstableMakeIsData " "TSRedeemer 

--| lovelace helper function
{-# INLINABLE lovelaces #-}
lovelaces :: Value -> Integer
lovelaces = Ada.getLovelace _ Ada.fromValue

--| Script Addresss

{-# INLINABLE transition #-}
transition :: TokenSale -> State Integer -> TSRedeemer -> Maybe (TxConstraints Void Void, State Integer)
transition ts s r = case (StateValue s, stateData, r) of
    (v, _, SetPrice)     | p >= 0               -> Just ( Constraints.mustBeSignedBy (tsSeller ts)
                                                         , State p $
                                                           v <>
                                                           nft (negate 1)
                                                           )
    (v, p, BuyTokens n) | n > 0 -> ( mempty
                                   , State p $
                                     v                                       <>
                                     nft(negate 1)                           <>
                                     assetClassValue (tsToken ts) (negate n) <>
                                     lovelaceValueOf (n * p)
                                    )
   (v, p, Withdraw n l) | n >= 0 && 1 >= 0 -> Just ( Constraints.mustBeSignedBy (tsSeller ts)
                                                    , State p $
                                                      v                                      <>
                                                      nft (negate 1)                         <>
                                                      assetClassValueOf (negate 1)
                                                    )
     _                                      -> Nothing
    where

 --| helper function to reference NFT
    -- reference smart contract 
      nft :: Integer -> Value
      nft = assetClassValue (tsNFT ts)
      
--| Boiler plate code to compile   
   type TS = StateMachine Integer TSRedeemer

tsInst :: TokenSale -> Scripts.ScriptInstance TS
tsInst ts = Scripts.validator @TS
    ($$(PlutusTx.compile [|| mkTSValidator ||]) `PlutusTx.applyCode` PlutusTx.liftCode ts)
    $$(PlutusTx.compile [|| wrap ||])
  where
    wrap = Scripts.wrapValidator @Integer @TSRedeemer

tsValidator :: TokenSale -> Validator 
tsValidator = scriptAddress . tsValidator

tsClient :: TokenSale -> StateMachineClient Integer TSRedeeemer
tsClient ts = mkStateMachineClient $ StateMachineInstance (stStateMachine ts) (tsInst ts)

-- | Two helper function to convert specialised error types to Text
mapErrorC :: Contract w s C.CurrencyError a -> Contract w s Text a 
mapErrorC = mapError $ pack . show

mapErrorSM :: Contract w s SMContractError a -> Contract w s Text a
MapErrorSM = mapError $ pack . show

--| Off-chain code
-- define NFT Name (CarterToken)
nftName :: CarterToken
nftName = "NFT"

--| 1st contract is starting token sale
-- contract invoked by Seller's pub key hash
-- if Nothing mint nft with 1st argument (Maybe CurrencySymbol)
-- AssetClass token seller wants to trade
-- return type using writer monad type Last (once TokenSale is setup other contracts discover it)
startTs :: HasBlockchainActions s => Maybe CurrencySymbol -> AssetClass -> Contract (Last TokenSale) s Text TokenSale 
startTs mcs token = do
    pkh <- pubKeyHash <$> Contract.ownPubKey
    cs  <- case mcs of
        Nothing  -> C.currencySymbol <$> mapErrorC (C.forgeContract pkh [(nftName, 1)])
        Just cs' -> return cs'
--| define TokenSale create state machine client        
    let ts = TokenSale 
            {  tsSeller = pkh
            ,  tsToken  = token
            ,  tsNFT    = AssetClass (cs, nftName)
            }
         client = tsClient ts
