datatype
datum/Redeemers
Script Address
txInfo
Instances
find output
compile 
off-chain
data params
contract wsea
endpoints

--| Tokenize CarterToken allow anyone swap for its value
data CarterToken = CarterToken 
{ ctSeller :: !PubKeyHash
, ctToken :: !AssetClass
, ctNFT   :: !AssetClass
} deriving (Show, Generic, FromJSON, ToJSON, Prelude.Eq, Prelude.Ord)

p
data CTRedeemer = 
      SetPrice Integer             -- price
    | BuyTokens Integer            -- buy CT Tokens
    | Withdraw Integer Integer     -- Withdraw Tokens + lovelaces
    deriving (Show, Prelude.Eq)

PlutusTx.unstableMakeIsData " "CTRedeemer 

--| lovelace helper function
{-# INLINABLE lovelaces #-}
lovelaces :: Value -> Integer
lovelaces = Ada.getLovelace _ Ada.fromValue

--| Script Addresss

{-# INLINABLE transition #-}
transition :: CarterToken -> State Integer -> CTRedeemer -> Maybe (TxConstraints Void Void, State Integer)
transition ct s r = case (StateValue s, stateData, r) of
    (v, _, SetPrice)     | p >= 0               -> Just ( Constraints.mustBeSignedBy (ctSeller ct)
                                                         , State p $
                                                           v <>
                                                           nft (negate 1)
                                                           )
    (v, p, BuyTokens n) | n > 0 -> ( mempty
                                   , State p $
                                     v                                       <>
                                     nft(negate 1)                           <>
                                     assetClassValue (ctToken ct) (negate n) <>
                                     lovelaceValueOf (n * p)
                                    )
   (v, p, Withdraw n l) | n >= 0 && 1 >= 0 -> Just ( Constraints.mustBeSignedBy (ctSeller ct)
                                                    , State p $
                                                      v                                      <>
                                                      nft (negate 1)                         <>
                                                      assetClassValueOf (negate 1)
                                                    )
     _                                      -> Nothing
    where

 --| helper function to reference NFT
    -- reference smart contract 
      nft :: Integer -> Value
      nft = assetClassValue (ctNFT ct)
      
--| Boiler plate code to compile   
   type CT = StateMachine Integer CTRedeemer

ctInst :: CarterToken -> Scripts.ScriptInstance CT
ctInst ts = Scripts.validator @TS
    ($$(PlutusTx.compile [|| mkCTValidator ||]) `PlutusTx.applyCode` PlutusTx.liftCode ct)
    $$(PlutusTx.compile [|| wrap ||])
  where
    wrap = Scripts.wrapValidator @Integer @CTRedeemer

ctValidator :: CarterToken -> Validator 
ctValidator = scriptAddress . ctValidator

ctClient :: CarterToken -> StateMachineClient Integer CTRedeeemer
ctClient ct = mkStateMachineClient $ StateMachineInstance (ctStateMachine ct) (ctInst ct)

-- | Two helper function to convert specialised error types to Text
mapErrorC :: Contract w s C.CurrencyError a -> Contract w s Text a 
mapErrorC = mapError $ pack . show

mapErrorSM :: Contract w s SMContractError a -> Contract w s Text a
MapErrorSM = mapError $ pack . show

--| Off-chain code
-- define NFT Name (CarterToken)
nftName :: CarterToken
nftName = "NFT"
m
