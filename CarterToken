datatype
datum/Redeemers
Script Address
txInfo
Instances
find output
compile 
off-chain
data params
contract wsea
endpoints

--| Tokenize CarterToken allow anyone swap for its value
-- csNFT arbituarty NFT to identify utxo
data CarterSale = CarterSale
{ csSeller :: !PubKeyHash
, csToken :: !AssetClass
, csNFT   :: !AssetClass
} deriving (Show, Generic, FromJSON, ToJSON, Prelude.Eq, Prelude.Ord)


data CSRedeemer = 
      SetPrice Integer             -- price CS
    | AddTokens Integer            -- Add more CS Tokens  
    | BuyTokens Integer            -- buy CS Tokens
    | Withdraw Integer Integer     -- Withdraw CS + lovelaces
    deriving (Show, Prelude.Eq)

PlutusTx.unstableMakeIsData " "CTRedeemer 

--| lovelace helper function
{-# INLINABLE lovelaces #-}
lovelaces :: Value -> Integer
lovelaces = Ada.getLovelace _ Ada.fromValue

--| Script Addresss

{-# INLINABLE transition #-}
transition :: CarterSale -> State Integer -> CSRedeemer -> Maybe (TxConstraints Void Void, State Integer)
transition cs s r = case (StateValue s, stateData, r) of
    (v, _, SetPrice)     | p >= 0               -> Just ( Constraints.mustBeSignedBy (csSeller cs)
                                                         , State p $
                                                           v <>
                                                           nft (negate 1)
                                                           )
                                                           
    (v, p, AddTokens n) | n > 0                 -> Just( Constraints.mustBeSignedBy (csSeller cs)           
                                                         , State p $ v <>
                                                           nft (negate 1) <>
                                                           assetClassValue (csToken cs) n
                                                        )
    
    
    (v, p, BuyTokens n) | n > 0 -> ( mempty
                                   , State p $
                                     v                                       <>
                                     nft(negate 1)                           <>
                                     assetClassValue (csToken cs) (negate n) <>
                                     lovelaceValueOf (n * p)
                                    )
   (v, p, Withdraw n l) | n >= 0 && 1 >= 0 -> Just ( Constraints.mustBeSignedBy (csSeller cs)
                                                    , State p $
                                                      v                                      <>
                                                      nft (negate 1)                         <>
                                                      assetClassValueOf (negate 1)
                                                    )
     _                                      -> Nothing
    where

 --| helper function to reference NFT
    -- reference smart contract 
      nft :: Integer -> Value
      nft = assetClassValue (csNFT cs)
      
--| Boiler plate code to compile   
   type CS = StateMachine Integer CSRedeemer

csInst :: CarterSale -> Scripts.ScriptInstance CS
csInst cs = Scripts.validator @CS
    ($$(PlutusTx.compile [|| mkCSValidator ||]) `PlutusTx.applyCode` PlutusTx.liftCode cs)
    $$(PlutusTx.compile [|| wrap ||])
  where
    wrap = Scripts.wrapValidator @Integer @CSRedeemer

csValidator :: CarterSale -> Validator 
csValidator = scriptAddress . csValidator

csClient :: CarterSale -> StateMachineClient Integer CSRedeeemer
csClient cs = mkStateMachineClient $ StateMachineInstance csStateMachine cs) (csInst cs)

-- | Two helper function to convert specialised error types to Text
mapErrorC :: Contract w s C.CurrencyError a -> Contract w s Text a 
mapErrorC = mapError $ pack . show

mapErrorSM :: Contract w s SMContractError a -> Contract w s Text a
MapErrorSM = mapError $ pack . show

--| Off-chain code
-- define NFT Name (CarterToken)
nftName :: CarterToken
nftName = "NFT"

--| 1st contract is starts Carter Token sale
-- contract invoked by Seller's pub key hash
-- if Nothing mint nft with 1st argument (Maybe CurrencySymbol)
-- AssetClass token seller wants to trade
-- return type using writer monad type Last (once CarterToken is setup other contracts discover it)
startCS :: HasBlockchainActions s => Maybe CurrencySymbol -> AssetClass -> Contract (Last CarterSale) s Text CarterSale 
startCS mcs token = do
    pkh <- pubKeyHash <$> Contract.ownPubKey
    cs  <- case mcs of
        Nothing  -> C.currencySymbol <$> mapErrorC (C.forgeContract pkh [(nftName, 1)])
        Just cy' -> return cy'
--| define CarterToken create state machine client        
    let cs = CarterSale 
            {  csSeller = pkh
            ,  csToken  = token
            ,  csNFT    = AssetClass (cy, nftName)
            }
         client = csClient cs
          void $ mappErrorSM $ runInitialise client 0 mempty
          tell $ Last $ Just cs
          logInfo $ "start Carter Token sale" ++ show cs
          return cs

--| functions for the other 3 operations
-- add TokenSale argument to identify contract + new values  
-- use runstep using client and redeemers wrap with mapErrorSM to convert Text error messages 
-- ignore result
  setPrice :: HasBlockchainActions s => CarterSale -> Integer -> Contract w s Text ()
  setPrice cs p = void $ mapErrorSM $ runStep (csClient cs) $ SetPrice p
  
  addTokens :: HasBlockchainActions s => CarterSale -> Integer -> Contract w s Text ()
  addTokens cs n = void $ mapErrorSM $ runStep (csClient cs) $ AddToken n)

  buyTokens :: HasBlockchainActions s => CarterSale -> Integer -> Contract w s Text ()
  buyTokens cs n = void $ mapErrorSM $ runStep (csClient cs) $ BuyTokens n
  
  withdraw :: HasBlockchainActions s => CarterSale -> Integer -> Integer -> Contract w s Text ()
  withdraw cs n 1 = void $ mapErrorSM $ runStep (csClient cs) $ Withdraw n 1
  
  type CSStartSchema = BlockchainActions
      .\/ Endpoint "start"       (CurrencySymbol, CarterToken)
  type CSStartSchema' = BlockchainActions
      .\/ Endpoint "start"       (CurrencySymbol, CurrencySymbol, CarterToken)
  type CSUseSchema = BlockchainActions
      .\/ Endpoint "set price" Integer
      .\/ Endpoint "add tokens" Integer
      .\/ Endpoint "buy tokens" Integer
      .\/ Endpoint "withdraw" (Integer, Integer)
      

 --| Start endpoint calls startTS with Nothing (has to be minted), wrap in handleError (log Error)    
  startEndpoint :: Contract (Last CarterSale) CSStartSchema Text ()
  startEndpoint = startCS' >> startEndpoint
    where
     startCS' = handleError logError $ endpoint @"start" >>= void . startCS Nothing . AssetClass
 
 --| startEndpoint function add NFT parameter, as per TSStartSchema 
  startEndpoint' :: Contract ( Last CarterSale) CSStartSchema' Text ()
  startEndpoint' = startCS' >> startEndpoint'
    where
       startCS' = handleError logError $ endpoint @"start" >>= \(cy1, cy2, tn) -> void $ startCS (Just cy1) $ AssetClass (cy2, tn)
       
  --|Give a choice between the 4 endpoints, call function defined earlier with arguments fed in endpoint call
 -- everything wrapped inside an error handler so contract can't crash
 useEndpoints :: CarterSale -> Contract () CSUseSchema Text ()
 useEndpoints cs = (setPrice' 'select' addTokens' 'select' buyTokens' 'select' withdraw') >> useEndpoints cs
   where
     setPrice'  = handleError  logError $ endpoint @"set price"  >>= setPrice cs
     addTokens' = handleError  logError $ endpoint @"add tokens" >>= addTokens cs
     buyTokens' = handleError  logError $ endpoint @"buy tokens" >>= buyTokens cs
     withdraw'  = handdleError logError $ endpoint @"withdraw"   >>= uncurry (withdraw cs)     
